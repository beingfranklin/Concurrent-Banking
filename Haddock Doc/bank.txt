-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/beingfranklin/Concurrent-Banking#readme</a>
@package bank
@version 0.1.0.0


-- | Module header for module containing getAccount, transfer and
--   randomTransaction methods
module Lib

-- | Get account by ID using Map.lookup, create new empty account if it
--   didn't exist.
getAccount :: Customer -> AccountName -> STM Balance

-- | Transfer amount between two accounts. The amounts are transferred
--   between two accounts (from and to) using the ids passed while calling
--   the method. The amount is also chosen randomly between th emaximum and
--   minimum values, ie 10 and 50.
transfer :: Pounds -> Balance -> Balance -> STM ()

-- | Generate random transaction.Here we generate three random valuues -
--   random accounts to debit and credit, and random sum to do the same.
--   All the transactions are done atomically, either full gets executed or
--   none.
randomTransaction :: Customer -> IO ()
